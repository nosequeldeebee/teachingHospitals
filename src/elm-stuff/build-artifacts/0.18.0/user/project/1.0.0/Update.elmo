var _user$project$Update$refresh = F2(
	function (keyword, h) {
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toUpper(keyword),
			h.name) ? _elm_lang$core$Maybe$Just(h) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Update$updateInitialKey = function (response) {
	var _p0 = response;
	switch (_p0.ctor) {
		case 'NotAsked':
			return {ctor: '[]'};
		case 'Loading':
			return {ctor: '[]'};
		case 'Failure':
			return {ctor: '[]'};
		default:
			return _p0._0;
	}
};
var _user$project$Update$updateInitial = function (response) {
	var _p1 = response;
	switch (_p1.ctor) {
		case 'NotAsked':
			return {ctor: '[]'};
		case 'Loading':
			return {ctor: '[]'};
		case 'Failure':
			return {ctor: '[]'};
		default:
			return _p1._0;
	}
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'OnFetchHospitals':
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							initialHospitals: _user$project$Update$updateInitial(_p3),
							refreshedHospitals: _user$project$Update$updateInitial(_p3),
							searchedHospitals: _user$project$Update$updateInitial(_p3)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnFetchKeys':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							apikey: _user$project$Update$updateInitialKey(_p2._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Change':
				var _p4 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: A2(
								_elm_lang$core$List$filterMap,
								_user$project$Update$refresh(_p4),
								model.initialHospitals),
							searchedHospitals: A2(
								_elm_lang$core$List$filterMap,
								_user$project$Update$refresh(_p4),
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortName':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.name;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.name;
								},
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortAddress':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.address;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.address;
								},
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortCity':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.city;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.city;
								},
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortState':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.state;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.state;
								},
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortZip':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.zip;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.zip;
								},
								model.initialHospitals),
							index: 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: A2(_elm_lang$core$List$take, model.index + 10, model.searchedHospitals),
							index: model.index + 10
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
