var _user$project$Update$refresh = F2(
	function (keyword, h) {
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toUpper(keyword),
			h.name) ? _elm_lang$core$Maybe$Just(h) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Update$updateInitial = function (response) {
	var _p0 = response;
	switch (_p0.ctor) {
		case 'NotAsked':
			return {
				ctor: '::',
				_0: {name: '', address: '', city: '', state: '', zip: ''},
				_1: {ctor: '[]'}
			};
		case 'Loading':
			return {
				ctor: '::',
				_0: {name: 'Loading...', address: '', city: '', state: '', zip: ''},
				_1: {ctor: '[]'}
			};
		case 'Failure':
			return {
				ctor: '::',
				_0: {
					name: _elm_lang$core$Basics$toString(_p0._0),
					address: '',
					city: '',
					state: '',
					zip: ''
				},
				_1: {ctor: '[]'}
			};
		default:
			return _p0._0;
	}
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'NewKey':
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{key: _p1._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								key: _elm_lang$core$Basics$toString(_p1._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnFetchHospitals':
				var _p2 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							initialHospitals: _user$project$Update$updateInitial(_p2),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								_user$project$Update$updateInitial(_p2)),
							searchedHospitals: _user$project$Update$updateInitial(_p2)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Change':
				var _p3 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$filterMap,
									_user$project$Update$refresh(_p3),
									model.initialHospitals)),
							searchedHospitals: A2(
								_elm_lang$core$List$filterMap,
								_user$project$Update$refresh(_p3),
								model.initialHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortName':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.name;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.name;
									},
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortAddress':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.address;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.address;
									},
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortCity':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.city;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.city;
									},
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortState':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.state;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.state;
									},
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortZip':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							searchedHospitals: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.zip;
								},
								model.initialHospitals),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.zip;
									},
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$next(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$prev(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
