var _user$project$Update$refresh = F2(
	function (keyword, h) {
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toUpper(keyword),
			h.state) ? _elm_lang$core$Maybe$Just(h) : ((A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toUpper(keyword),
			h.name) && (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(keyword),
			2) > 0)) ? _elm_lang$core$Maybe$Just(h) : ((A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toUpper(keyword),
			h.city) && (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(keyword),
			2) > 0)) ? _elm_lang$core$Maybe$Just(h) : _elm_lang$core$Maybe$Nothing));
	});
var _user$project$Update$sortState = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.reverseState, false) ? {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.state;
						},
						model.initialHospitals)),
				reverseState: true
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	} : {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$sortBy,
							function (_) {
								return _.state;
							},
							model.initialHospitals))),
				reverseState: false
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Update$sortCity = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.reverseCity, false) ? {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.city;
						},
						model.initialHospitals)),
				reverseCity: true
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	} : {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$sortBy,
							function (_) {
								return _.city;
							},
							model.initialHospitals))),
				reverseCity: false
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Update$sortName = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.reverseName, false) ? {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.name;
						},
						model.initialHospitals)),
				reverseName: true
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	} : {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				refreshedHospitals: A2(
					_jschomay$elm_paginate$Paginate$fromList,
					10,
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$sortBy,
							function (_) {
								return _.name;
							},
							model.initialHospitals))),
				reverseName: false
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NewKey':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{key: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								key: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OnFetchHospitals':
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							initialHospitals: _user$project$WebResponse$updateInitial(_p1),
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								_user$project$WebResponse$updateInitial(_p1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Change':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								10,
								A2(
									_elm_lang$core$List$filterMap,
									_user$project$Update$refresh(_p0._0),
									model.initialHospitals))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SortName':
				return _user$project$Update$sortName(model);
			case 'SortCity':
				return _user$project$Update$sortCity(model);
			case 'SortState':
				return _user$project$Update$sortState(model);
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$next(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$prev(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$first(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							refreshedHospitals: _jschomay$elm_paginate$Paginate$last(model.refreshedHospitals)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
